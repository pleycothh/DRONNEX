"use strict";(self.webpackChunkdocs_site=self.webpackChunkdocs_site||[]).push([[2689],{8453:(r,n,o)=>{o.d(n,{R:()=>a,x:()=>l});var e=o(6540);const t={},i=e.createContext(t);function a(r){const n=e.useContext(i);return e.useMemo((function(){return"function"==typeof r?r(n):{...n,...r}}),[n,r])}function l(r){let n;return n=r.disableParentContext?"function"==typeof r.components?r.components(t):r.components||t:a(r.components),e.createElement(i.Provider,{value:n},r.children)}},9583:(r,n,o)=>{o.r(n),o.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>m,frontMatter:()=>a,metadata:()=>e,toc:()=>s});const e=JSON.parse('{"id":"project/foc-balance-bot","title":"FOC balance bot","description":"Introduction","source":"@site/docs/project/foc-balance-bot.md","sourceDirName":"project","slug":"/project/foc-balance-bot","permalink":"/doc/docs/project/foc-balance-bot","draft":false,"unlisted":false,"editUrl":"https://github.com/pleycothh/DRONNEX/tree/main/docs-site/docs/project/foc-balance-bot.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"3D printed VTOL","permalink":"/doc/docs/project/3d-printed-vtol"},"next":{"title":"AI Drone (Chinese)","permalink":"/doc/docs/project/ai-drone-cn"}}');var t=o(4848),i=o(8453);const a={sidebar_position:2},l="FOC balance bot",c={},s=[{value:"Introduction",id:"introduction",level:2},{value:"Prerequirement",id:"prerequirement",level:2}];function d(r){const n={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...r.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"foc-balance-bot",children:"FOC balance bot"})}),"\n",(0,t.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,t.jsx)(n.p,{children:"STM32 F411 balance bot code demo"}),"\n",(0,t.jsx)(n.h2,{id:"prerequirement",children:"Prerequirement"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Code:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'#include <SimpleFOC.h>\r\n\r\n#define LED_PIN PC13   // On STM32F411, built-in LED is usually on PC13\r\n#define BUTTON_PIN PA0    // User button connected to PA0 (K1)\r\n#define GND_PIN_0 PB2\r\n#define GND_PIN_1 PA4\r\nMagneticSensorI2C sensor0 = MagneticSensorI2C(AS5600_I2C);\r\nMagneticSensorI2C sensor1 = MagneticSensorI2C(AS5600_I2C);\r\n// example of stm32 defining 2nd bus \r\nTwoWire Wire1(PB3, PB10);\r\n\r\n// BLDC motor & driver instance\r\nBLDCMotor motor0 = BLDCMotor(7);\r\nBLDCMotor motor1 = BLDCMotor(7);\r\n\r\nBLDCDriver3PWM driver0 = BLDCDriver3PWM(PA6, PA7, PB0, PB1);\r\nBLDCDriver3PWM driver1 = BLDCDriver3PWM(PA5, PA1, PA2, PA3);\r\n// angle set point variable\r\n//float target_angle = 0;\r\nfloat target_voltage = 2;\r\n\r\n// instantiate the commander\r\nCommander command = Commander(Serial);\r\nvoid doTarget(char* cmd) { command.scalar(&target_voltage, cmd); }\r\n\r\nvoid setup() {\r\n  pinMode(LED_PIN, OUTPUT);\r\n  pinMode(BUTTON_PIN, INPUT_PULLUP);  // Active LOW\r\n\r\n  pinMode(GND_PIN_0, OUTPUT);\r\n  digitalWrite(GND_PIN_0, LOW);  // Drive PB2 to logic LOW\r\n  \r\n  pinMode(GND_PIN_1, OUTPUT);\r\n  digitalWrite(GND_PIN_1, LOW);  // Drive PB2 to logic LOW\r\n\r\n  Serial.begin(115200);\r\n // while (!Serial); // Wait for USB serial to connect\r\n  Serial.println("USB Serial ready");\r\n  // comment out if not needed\r\n  SimpleFOCDebug::enable(&Serial);\r\n  // ================================== Sensor ==============================\r\n\r\n  Wire.setClock(400000);\r\n  Wire1.setClock(400000);\r\n\r\n  sensor0.init();\r\n  sensor1.init(&Wire1);\r\n\r\n  motor0.linkSensor(&sensor0);\r\n  motor1.linkSensor(&sensor1);\r\n  Serial.println("Sensor ready");\r\n\r\n  // ==================================== Driver ==========\r\n  // power supply voltage [V]\r\n  driver0.voltage_power_supply = 12;\r\n  driver1.voltage_power_supply = 12;\r\n\r\n  driver0.init();\r\n  driver1.init();\r\n\r\n  motor0.linkDriver(&driver0);\r\n  motor1.linkDriver(&driver1);\r\n\r\n  // ==================================== MOTOR ==========\r\n  // choose FOC modulation (optional)\r\n  motor0.foc_modulation = FOCModulationType::SpaceVectorPWM;\r\n  motor1.foc_modulation = FOCModulationType::SpaceVectorPWM;\r\n  // set motion control loop to be used\r\n  motor0.controller = MotionControlType::angle;\r\n  motor1.controller = MotionControlType::angle;\r\n\r\n  // velocity PI controller parameters\r\n  motor0.PID_velocity.P = 0.21f;\r\n  motor0.PID_velocity.I = 0.01;\r\n  motor0.PID_velocity.D = 0;\r\n\r\n  motor1.PID_velocity.P = 0.21f;\r\n  motor1.PID_velocity.I = 0.01;\r\n  motor1.PID_velocity.D = 0;\r\n\r\n  // maximal voltage to be set to the motor\r\n  motor0.voltage_limit = 10;\r\n  motor1.voltage_limit = 10;\r\n\r\n  // velocity low pass filtering time constant\r\n  motor0.LPF_velocity.Tf = 0.01f;\r\n  motor1.LPF_velocity.Tf = 0.01f;\r\n\r\n  // angle P controller\r\n  motor0.P_angle.P = 20;\r\n  motor1.P_angle.P = 20;\r\n\r\n  // maximal velocity of the position control\r\n  motor0.velocity_limit = 20;\r\n  motor1.velocity_limit = 20;\r\n\r\n  // comment out if not needed\r\n  motor0.useMonitoring(Serial);\r\n  motor1.useMonitoring(Serial);\r\n\r\n  // initialize motor\r\n  motor0.init();\r\n  motor1.init();\r\n\r\n  // align sensor and start FOC\r\n  motor0.initFOC();\r\n  motor1.initFOC();\r\n\r\n  // ==================================== Command ====================\r\n  // add target command T\r\n  //command.add(\'T\', doTarget, "target angle");\r\n  command.add(\'T\', doTarget, "motor voltage");\r\n\r\n  Serial.println(F("Motor 0 1 ready."));\r\n  Serial.println(F("Set the target angle using serial terminal:"));\r\n  _delay(1000);\r\n  digitalWrite(LED_PIN, LOW); \r\n}\r\n\r\nint loopCount = 0;\r\n\r\nfloat leftAngle = 0;\r\nfloat rightAngle = 0;\r\nvoid loop() {\r\n  // iterative function updating the sensor internal variables\r\n  // it is usually called in motor.loopFOC()\r\n  // this function reads the sensor hardware and \r\n  // has to be called before getAngle nad getVelocity\r\n  //sensor0.update();\r\n  //sensor1.update();\r\n  motor0.loopFOC();\r\n  motor1.loopFOC();\r\n\r\n  //motor0.move();\r\n  //motor1.move();\r\n  //command.run();\r\n\r\n  // virtual link code\r\n  motor1.move( 5*(motor2.shaft_angle - motor1.shaft_angle));\r\n  motor2.move( 5*(motor1.shaft_angle - motor2.shaft_angle));\r\n\r\n  loopCount++;\r\n  if (loopCount >= 500) {\r\n    Serial.print(leftCurrent); \r\n    Serial.print(" - "); \r\n    Serial.print(rightCurrent);\r\n    Serial.println();\r\n    loopCount = 0;\r\n    if (digitalRead(BUTTON_PIN) == LOW) \r\n    {\r\n      Serial.println("USB Serial ready");\r\n    }\r\n  }\r\n}\r\n\n'})})]})}function m(r={}){const{wrapper:n}={...(0,i.R)(),...r.components};return n?(0,t.jsx)(n,{...r,children:(0,t.jsx)(d,{...r})}):d(r)}}}]);