"use strict";(self.webpackChunkdocs_site=self.webpackChunkdocs_site||[]).push([[6403],{947:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>d,default:()=>u,frontMatter:()=>a,metadata:()=>t,toc:()=>o});const t=JSON.parse('{"id":"tutorial/as5600-function-test","title":"Use ESP32 test AS5600","description":"Introduction","source":"@site/docs/tutorial/as5600-function-test.md","sourceDirName":"tutorial","slug":"/tutorial/as5600-function-test","permalink":"/doc/docs/tutorial/as5600-function-test","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/tutorial/as5600-function-test.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"Use ELSR reciver on ESP32","permalink":"/doc/docs/tutorial/connect-esp32-sbus"},"next":{"title":"Mavlink","permalink":"/doc/docs/tutorial/mavlink"}}');var i=r(4848),s=r(8453);const a={sidebar_position:4},d="Use ESP32 test AS5600",l={},o=[{value:"Introduction",id:"introduction",level:2},{value:"Prerequirement",id:"prerequirement",level:2},{value:"Detect I2C device",id:"detect-i2c-device",level:2},{value:"Result output",id:"result-output",level:2},{value:"AS5600 Function test",id:"as5600-function-test",level:2},{value:"Result output",id:"result-output-1",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"use-esp32-test-as5600",children:"Use ESP32 test AS5600"})}),"\n",(0,i.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,i.jsx)(n.p,{children:"Use Esp32 to find phsical address for any i2c device, then do functional test with AS5600."}),"\n",(0,i.jsx)(n.h2,{id:"prerequirement",children:"Prerequirement"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Hardware:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Any ",(0,i.jsx)(n.a,{href:"https://core-electronics.com.au/pros3-esp32-s3-dev-board-1.html",children:"ESP32"})]}),"\n",(0,i.jsxs)(n.li,{children:["Any ",(0,i.jsx)(n.a,{href:"https://www.amazon.com.au/Alinan-Magnetic-Precision-Induction-Measurement/dp/B09QYC916Q",children:"AS5600"})]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Wiring guide"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"ESP32 SCL PIN20"})," \u2192 ",(0,i.jsx)(n.code,{children:"AS5600 SCL"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"ESP32 SDA PIN 21"})," \u2192 ",(0,i.jsx)(n.code,{children:"AS5600 SDA"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"ESP32 Ground"})," \u2192 ",(0,i.jsx)(n.code,{children:"AS5600 Ground"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"ESP32 3.3v"})," \u2192 ",(0,i.jsx)(n.code,{children:"3.3v"})]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"detect-i2c-device",children:"Detect I2C device"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",metastring:'title="Sbus-streamer.ino"',children:'#include <Wire.h>\r\n\r\n#define SDA_PIN 21\r\n#define SCL_PIN 20\r\n\r\nvoid setup() {\r\n  Serial.begin(115200);\r\n  Wire.begin(SDA_PIN, SCL_PIN);\r\n  delay(1000);\r\n\r\n  Serial.println("\ud83d\udd0d Scanning I2C bus...");\r\n  for (byte addr = 1; addr < 127; addr++) {\r\n    Wire.beginTransmission(addr);\r\n    if (Wire.endTransmission() == 0) {\r\n      Serial.print("\u2705 Device found at 0x");\r\n      Serial.println(addr, HEX);\r\n    }\r\n  }\r\n}\r\n\r\nvoid loop() {}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"result-output",children:"Result output"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",metastring:'title="Serial Monitor at 11520 baud"',children:"ESP-ROM:esp32s3-20210327\r\nBuild:Mar 27 2021\r\nrst:0x1 (POWERON),boot:0xb (SPI_FAST_FLASH_BOOT)\r\nSPIWP:0xee\r\nmode:DIO, clock div:1\r\nload:0x3fce3808,len:0x4bc\r\nload:0x403c9700,len:0xbd8\r\nload:0x403cc700,len:0x2a0c\r\nentry 0x403c98d0\r\n\ud83d\udd0d Scanning I2C bus...\r\n\u2705 Device found at 0x36\r\n\ud83d\udd0d Scanning I2C bus...\r\n\u2705 Device found at 0x36\n"})}),"\n",(0,i.jsx)(n.h2,{id:"as5600-function-test",children:"AS5600 Function test"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",metastring:'title="Sbus-streamer.ino"',children:'#include <Wire.h>\r\n\r\n#define AS5600_ADDR 0x36\r\n#define SDA_PIN 21\r\n#define SCL_PIN 20\r\n\r\nvoid setup() {\r\n  Serial.begin(115200);\r\n  Wire.begin(SDA_PIN, SCL_PIN);\r\n\r\n  delay(500);\r\n  Serial.println("\ud83d\udd0d Starting AS5600 I2C Scan...");\r\n\r\n  Wire.beginTransmission(AS5600_ADDR);\r\n  byte error = Wire.endTransmission();\r\n  if (error == 0) {\r\n    Serial.println("\u2705 AS5600 found at 0x36");\r\n  } else {\r\n    Serial.println("\u274c AS5600 not detected");\r\n  }\r\n}\r\n\r\nvoid loop() {\r\n  uint16_t angle = readAS5600RawAngle();\r\n  float deg = angle * 360.0 / 4096.0;\r\n  Serial.printf("\ud83c\udf00 Raw angle: %u | Degrees: %.2f\xb0\\n", angle, deg);\r\n  delay(500);\r\n}\r\n\r\nuint16_t readAS5600RawAngle() {\r\n  Wire.beginTransmission(AS5600_ADDR);\r\n  Wire.write(0x0C); // Start at raw angle MSB\r\n  Wire.endTransmission();\r\n\r\n  Wire.requestFrom(AS5600_ADDR, 2);\r\n  uint8_t msb = Wire.read();\r\n  uint8_t lsb = Wire.read();\r\n\r\n  return ((msb << 8) | lsb) & 0x0FFF; // 12-bit angle\r\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"result-output-1",children:"Result output"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",metastring:'title="Serial Monitor at 11520 baud"',children:"\ud83c\udf00 Raw angle: 1 | Degrees: 1.00\xb0\r\n\ud83c\udf00 Raw angle: 2 | Degrees: 2.00\xb0\r\n\ud83c\udf00 Raw angle: 3 | Degrees: 3.00\xb0\r\n\ud83c\udf00 Raw angle: 4 | Degrees: 4.00\xb0\n"})})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>d});var t=r(6540);const i={},s=t.createContext(i);function a(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);