"use strict";(self.webpackChunkdocs_site=self.webpackChunkdocs_site||[]).push([[5768],{8453:(e,n,r)=>{r.d(n,{R:()=>s,x:()=>c});var t=r(6540);const o={},i=t.createContext(o);function s(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),t.createElement(i.Provider,{value:n},e.children)}},9813:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>u,frontMatter:()=>s,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"tutorial/yolo11n-rknn-rock5c","title":"Run Yolo11n on Rock with RKNN","description":"Refer to Radxa rock 5C documentation for futher details.","source":"@site/docs/tutorial/yolo11n-rknn-rock5c.md","sourceDirName":"tutorial","slug":"/tutorial/yolo11n-rknn-rock5c","permalink":"/doc/docs/tutorial/yolo11n-rknn-rock5c","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/tutorial/yolo11n-rknn-rock5c.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Tutorials","permalink":"/doc/docs/category/tutorials"},"next":{"title":"Use ELSR reciver on ESP32","permalink":"/doc/docs/tutorial/connect-esp32-sbus"}}');var o=r(4848),i=r(8453);const s={sidebar_position:1},c="Run Yolo11n on Rock with RKNN",a={},l=[{value:"Introduction",id:"introduction",level:2},{value:"Prerequirement",id:"prerequirement",level:2},{value:"Run Code",id:"run-code",level:2},{value:"Results",id:"results",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"run-yolo11n-on-rock-with-rknn",children:"Run Yolo11n on Rock with RKNN"})}),"\n",(0,o.jsxs)(n.p,{children:["Refer to ",(0,o.jsx)(n.strong,{children:"Radxa rock 5C"})," ",(0,o.jsx)(n.a,{href:"https://docs.radxa.com/en/rock5/rock5c/app-development/rknn_ultralytics",children:"documentation"})," for futher details."]}),"\n",(0,o.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,o.jsxs)(n.p,{children:["This guid is using Radxa ",(0,o.jsx)(n.a,{href:"https://radxa.com/products/accessories/camera4k/",children:"4k camera"})," camera to run Yolo11n on ",(0,o.jsx)(n.a,{href:"https://radxa.com/products/rock5/5c/",children:"Rock 5C"})," in realtime ( above 25FPS). This is very important for any visual based robotic need realtime decision making based on what it see."]}),"\n",(0,o.jsx)(n.h2,{id:"prerequirement",children:"Prerequirement"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Hardware:"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Rock chip board like ",(0,o.jsx)(n.a,{href:"https://radxa.com/products/rock5/5c/",children:"Rock 5C"})]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Wiring guide"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"Rock VIN"})," \u2192 ",(0,o.jsx)(n.code,{children:"5V"})]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"Rock Ground"})," \u2192 ",(0,o.jsx)(n.code,{children:"Ground"})]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"run-code",children:"Run Code"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"Create Virtual Environment"}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"Install ultralytics:"}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"pip3 install -U ultralytics\n"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Test Basic prediction:"}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"yolo predict model='./yolo11n_rknn_model' source='https://ultralytics.com/images/bus.jpg'\n"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Create python file:"}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"nano run.py\n"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Add code below:"}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",metastring:'title="run.py"',children:'import cv2\r\nimport time\r\nfrom ultralytics import YOLO\r\nimport numpy as np\r\n\r\n# Load the RKNN model (must be in the same directory as the script)\r\nmodel = YOLO("yolo11n_3588_rknn_model")\r\n\r\n# Open the Radxa 4K MIPI-CSI camera (usually /dev/video0)\r\ncap = cv2.VideoCapture("/dev/video11", cv2.CAP_V4L2)\r\ncap.set(cv2.CAP_PROP_FRAME_WIDTH, 640)\r\ncap.set(cv2.CAP_PROP_FRAME_HEIGHT, 640)\r\n\r\nif not cap.isOpened():\r\n    raise RuntimeError("\u274c Failed to open Radxa 4K camera at /dev/video0")\r\n\r\n# FPS monitor\r\nframe_count = 0\r\nstart_time = time.time()\r\n\r\nprint("Running YOLOv11n Inference (press \'Q\' to quit)...")\r\n\r\ntry:\r\n    while True:\r\n        ret, frame = cap.read()\r\n        if not ret:\r\n            print("\u26a0\ufe0f Camera frame capture failed.")\r\n            continue\r\n\r\n        # Resize to 640x640 and convert to RGB\r\n        resized = cv2.resize(frame, (640, 640))\r\n\r\n        # rgb = cv2.cvtColor(resized, cv2.COLOR_BGR2RGB)\r\n\r\n        # Inference using RKNN-accelerated YOLOv11\r\n        results = model.predict(source=resized, imgsz=640, stream=False)\r\n\r\n        # Annotate and display\r\n        annotated_frame = results[0].plot()\r\n        cv2.imshow("YOLOv11n Detection", annotated_frame)\r\n\r\n        if cv2.waitKey(1) & 0xFF == ord(\'q\'):\r\n            break\r\n\r\n        # FPS Calculation\r\n        frame_count += 1\r\n        elapsed = time.time() - start_time\r\n        if elapsed >= 1.0:\r\n            fps = frame_count / elapsed\r\n            print(f"\ud83d\udd04 FPS: {fps:.2f}")\r\n            frame_count = 0\r\n            start_time = time.time()\r\n\r\nexcept KeyboardInterrupt:\r\n    print("Inference stopped by user.")\r\n\r\nfinally:\r\n    cap.release()\r\n    cv2.destroyAllWindows()\r\n\n'})}),"\n",(0,o.jsx)(n.h2,{id:"results",children:"Results"})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}}}]);