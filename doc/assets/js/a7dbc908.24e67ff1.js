"use strict";(self.webpackChunkdocs_site=self.webpackChunkdocs_site||[]).push([[8605],{1470:(n,e,r)=>{r.d(e,{A:()=>D});var t=r(6540),i=r(4164),a=r(3104),o=r(6347),s=r(205),l=r(7485),c=r(1682),u=r(679);function d(n){return t.Children.toArray(n).filter((n=>"\n"!==n)).map((n=>{if(!n||(0,t.isValidElement)(n)&&function(n){const{props:e}=n;return!!e&&"object"==typeof e&&"value"in e}(n))return n;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof n.type?n.type:n.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function p(n){const{values:e,children:r}=n;return(0,t.useMemo)((()=>{const n=e??function(n){return d(n).map((({props:{value:n,label:e,attributes:r,default:t}})=>({value:n,label:e,attributes:r,default:t})))}(r);return function(n){const e=(0,c.XI)(n,((n,e)=>n.value===e.value));if(e.length>0)throw new Error(`Docusaurus error: Duplicate values "${e.map((n=>n.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(n),n}),[e,r])}function _({value:n,tabValues:e}){return e.some((e=>e.value===n))}function f({queryString:n=!1,groupId:e}){const r=(0,o.W6)(),i=function({queryString:n=!1,groupId:e}){if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!e)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return e??null}({queryString:n,groupId:e});return[(0,l.aZ)(i),(0,t.useCallback)((n=>{if(!i)return;const e=new URLSearchParams(r.location.search);e.set(i,n),r.replace({...r.location,search:e.toString()})}),[i,r])]}function h(n){const{defaultValue:e,queryString:r=!1,groupId:i}=n,a=p(n),[o,l]=(0,t.useState)((()=>function({defaultValue:n,tabValues:e}){if(0===e.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!_({value:n,tabValues:e}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${e.map((n=>n.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const r=e.find((n=>n.default))??e[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:e,tabValues:a}))),[c,d]=f({queryString:r,groupId:i}),[h,m]=function({groupId:n}){const e=function(n){return n?`docusaurus.tab.${n}`:null}(n),[r,i]=(0,u.Dv)(e);return[r,(0,t.useCallback)((n=>{e&&i.set(n)}),[e,i])]}({groupId:i}),g=(()=>{const n=c??h;return _({value:n,tabValues:a})?n:null})();(0,s.A)((()=>{g&&l(g)}),[g]);return{selectedValue:o,selectValue:(0,t.useCallback)((n=>{if(!_({value:n,tabValues:a}))throw new Error(`Can't select invalid tab value=${n}`);l(n),d(n),m(n)}),[d,m,a]),tabValues:a}}var m=r(2303);const g={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var v=r(4848);function C({className:n,block:e,selectedValue:r,selectValue:t,tabValues:o}){const s=[],{blockElementScrollPositionUntilNextRender:l}=(0,a.a_)(),c=n=>{const e=n.currentTarget,i=s.indexOf(e),a=o[i].value;a!==r&&(l(e),t(a))},u=n=>{let e=null;switch(n.key){case"Enter":c(n);break;case"ArrowRight":{const r=s.indexOf(n.currentTarget)+1;e=s[r]??s[0];break}case"ArrowLeft":{const r=s.indexOf(n.currentTarget)-1;e=s[r]??s[s.length-1];break}}e?.focus()};return(0,v.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.A)("tabs",{"tabs--block":e},n),children:o.map((({value:n,label:e,attributes:t})=>(0,v.jsx)("li",{role:"tab",tabIndex:r===n?0:-1,"aria-selected":r===n,ref:n=>{s.push(n)},onKeyDown:u,onClick:c,...t,className:(0,i.A)("tabs__item",g.tabItem,t?.className,{"tabs__item--active":r===n}),children:e??n},n)))})}function b({lazy:n,children:e,selectedValue:r}){const a=(Array.isArray(e)?e:[e]).filter(Boolean);if(n){const n=a.find((n=>n.props.value===r));return n?(0,t.cloneElement)(n,{className:(0,i.A)("margin-top--md",n.props.className)}):null}return(0,v.jsx)("div",{className:"margin-top--md",children:a.map(((n,e)=>(0,t.cloneElement)(n,{key:e,hidden:n.props.value!==r})))})}function A(n){const e=h(n);return(0,v.jsxs)("div",{className:(0,i.A)("tabs-container",g.tabList),children:[(0,v.jsx)(C,{...e,...n}),(0,v.jsx)(b,{...e,...n})]})}function D(n){const e=(0,m.A)();return(0,v.jsx)(A,{...n,children:d(n.children)},String(e))}},8453:(n,e,r)=>{r.d(e,{R:()=>o,x:()=>s});var t=r(6540);const i={},a=t.createContext(i);function o(n){const e=t.useContext(a);return t.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function s(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:o(n.components),t.createElement(a.Provider,{value:e},n.children)}},9365:(n,e,r)=>{r.d(e,{A:()=>o});r(6540);var t=r(4164);const i={tabItem:"tabItem_Ymn6"};var a=r(4848);function o({children:n,hidden:e,className:r}){return(0,a.jsx)("div",{role:"tabpanel",className:(0,t.A)(i.tabItem,r),hidden:e,children:n})}},9689:(n,e,r)=>{r.r(e),r.d(e,{assets:()=>u,contentTitle:()=>c,default:()=>_,frontMatter:()=>l,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"FOC/deng-foc-v4","title":"deng-foc-v4","description":"---","source":"@site/docs/FOC/deng-foc-v4.mdx","sourceDirName":"FOC","slug":"/FOC/deng-foc-v4","permalink":"/doc/docs/FOC/deng-foc-v4","draft":false,"unlisted":false,"editUrl":"https://github.com/pleycothh/DRONNEX/tree/main/docs-site/docs/FOC/deng-foc-v4.mdx","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"STM32-F103 (Blue pill) with simple FOC","permalink":"/doc/docs/FOC/blue-pill-simple-foc"},"next":{"title":"foc-library","permalink":"/doc/docs/FOC/foc-library"}}');var i=r(4848),a=r(8453),o=r(1470),s=r(9365);const l={},c=void 0,u={},d=[{value:"sidebar_position: 2",id:"sidebar_position-2",level:2},{value:"Introduction",id:"introduction",level:2},{value:"DengFOC-v4",id:"dengfoc-v4",level:2}];function p(n){const e={code:"code",h1:"h1",h2:"h2",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.hr,{}),"\n",(0,i.jsx)(e.h2,{id:"sidebar_position-2",children:"sidebar_position: 2"}),"\n",(0,i.jsx)(e.h1,{id:"dengfoc-v4-hardware",children:"DengFOC-v4 Hardware"}),"\n",(0,i.jsx)(e.h2,{id:"introduction",children:"Introduction"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"DengFOC-v4"}),"\n",(0,i.jsx)(e.li,{children:"MKS SimpleFOC v3.3 plus"}),"\n"]}),"\n",(0,i.jsx)(e.h2,{id:"dengfoc-v4",children:"DengFOC-v4"}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"MCU: ESP32-WROOM-DA Module"})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Current Sensor: Inline current"})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Max Current: 5A each with cooling"})}),"\n",(0,i.jsxs)(o.A,{children:[(0,i.jsx)(s.A,{value:"s",label:"AS-5600",default:!0,children:(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-jsx",metastring:'title="open-loop.ino"',children:'  // Deng\'s FOC AS5600 test case\uff1aDengFOCV4\r\n  #include <SimpleFOC.h>\r\n\r\n  MagneticSensorI2C sensor0 = MagneticSensorI2C(AS5600_I2C);\r\n  MagneticSensorI2C sensor1 = MagneticSensorI2C(AS5600_I2C);\r\n  TwoWire I2Cone = TwoWire(0);\r\n  TwoWire I2Ctwo = TwoWire(1);\r\n\r\n\r\n  void setup() {\r\n    Serial.begin(115200);\r\n\r\n    I2Cone.begin(19, 18, 400000UL); // AS5600_M0\r\n    I2Ctwo.begin(23, 5, 400000UL); // AS5600_M1\r\n    \r\n    sensor0.init(&I2Cone);\r\n    sensor1.init(&I2Ctwo);\r\n  }\r\n\r\n  void loop() {\r\n    sensor0.update();  // Remove if simple foc lib 2.20 and above.\r\n    sensor1.update();\r\n    Serial.print(sensor0.getAngle());\r\n    Serial.print(" - ");\r\n    Serial.println(sensor1.getAngle());\r\n    Serial.println();\r\n  }\n'})})}),(0,i.jsx)(s.A,{value:"d",label:"PWM Test",children:(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-jsx",metastring:'title="open-loop.ino"',children:"  BLDCMotor motor = BLDCMotor(7);\r\n  BLDCDriver3PWM driver = BLDCDriver3PWM(32, 33, 25, 12);\r\n\r\n  // BLDC motor & driver instance\r\n  BLDCMotor motor1 = BLDCMotor(7);\r\n  BLDCDriver3PWM driver1 = BLDCDriver3PWM(26, 27, 14, 12);\r\n\r\n  //\u76ee\u6807\u53d8\u91cf\r\n  float target_velocity = 10;\r\n  uint32_t prev_millis;\r\n\r\n  //\u8bbe\u7f6e\u62a5\u8b66\u7535\u538b\r\n  #define UNDERVOLTAGE_THRES 11.1\r\n\r\n  //\u4e32\u53e3\u6307\u4ee4\u8bbe\u7f6e\r\n  Commander command = Commander(Serial);\r\n  void doTarget(char* cmd) {\r\n    command.scalar(&target_velocity, cmd);\r\n  }\r\n\r\n  void board_check();\r\n  float get_vin_Volt();\r\n  void board_init();\r\n  bool flag_under_voltage = false;\r\n\r\n\r\n  void setup() {}\r\n  void loop() {}\n"})})}),(0,i.jsx)(s.A,{value:"currrent",label:"Inline Current",children:(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-jsx",metastring:'title="Inline-current.cpp"',children:'#include <Arduino.h> \r\n#include "InlineCurrent.h"\r\n\r\n\r\n#define _ADC_VOLTAGE 3.3f  \r\n#define _ADC_RESOLUTION 4095.0f \r\n\r\n#define _ADC_CONV ( (_ADC_VOLTAGE) / (_ADC_RESOLUTION) )\r\n\r\n#define NOT_SET -12345.0\r\n#define _isset(a) ( (a) != (NOT_SET) )\r\n\r\nCurrSense::CurrSense(int Mot_Num)\r\n{\r\n  if(Mot_Num==0)\r\n  {\r\n    pinA = 39;\r\n    pinB = 36;\r\n    //int pinC;\r\n    _shunt_resistor = 0.01;\r\n    amp_gain  = 50;\r\n    \r\n    volts_to_amps_ratio = 1.0f /_shunt_resistor / amp_gain; // volts to amps\r\n    \r\n    // gains for each phase\r\n    gain_a = volts_to_amps_ratio;\r\n    gain_b = volts_to_amps_ratio;\r\n    gain_c = volts_to_amps_ratio;\r\n  }\r\n  if(Mot_Num==1)\r\n  {\r\n    pinA = 35;\r\n    pinB = 34;\r\n    //int pinC;\r\n    _shunt_resistor = 0.01;\r\n    amp_gain  = 50;\r\n    \r\n    volts_to_amps_ratio = 1.0f /_shunt_resistor / amp_gain; // volts to amps\r\n    \r\n    // gains for each phase\r\n    gain_a = volts_to_amps_ratio;\r\n    gain_b = volts_to_amps_ratio;\r\n    gain_c = volts_to_amps_ratio;\r\n  }\r\n}\r\nfloat CurrSense::readADCVoltageInline(const int pinA){\r\n  uint32_t raw_adc = analogRead(pinA);\r\n  return raw_adc * _ADC_CONV;\r\n}\r\nvoid CurrSense::configureADCInline(const int pinA,const int pinB, const int pinC){\r\n  pinMode(pinA, INPUT);\r\n  pinMode(pinB, INPUT);\r\n  if( _isset(pinC) ) pinMode(pinC, INPUT);\r\n}\r\n\r\nvoid CurrSense::calibrateOffsets(){\r\n    const int calibration_rounds = 1000;\r\n\r\n    // \u67e5\u627e0\u7535\u6d41\u65f6\u5019\u7684\u7535\u538b\r\n    offset_ia = 0;\r\n    offset_ib = 0;\r\n    offset_ic = 0;\r\n    for (int i = 0; i < calibration_rounds; i++) {\r\n        offset_ia += readADCVoltageInline(pinA);\r\n        offset_ib += readADCVoltageInline(pinB);\r\n        if(_isset(pinC)) offset_ic += readADCVoltageInline(pinC);\r\n        delay(1);\r\n    }\r\n    offset_ia = offset_ia / calibration_rounds;\r\n    offset_ib = offset_ib / calibration_rounds;\r\n    if(_isset(pinC)) offset_ic = offset_ic / calibration_rounds;\r\n}\r\n\r\nvoid CurrSense::init(){\r\n    configureADCInline(pinA,pinB,pinC);\r\n    calibrateOffsets();\r\n}\r\n\r\nvoid CurrSense::getPhaseCurrents(){\r\n    current_a = (readADCVoltageInline(pinA) - offset_ia)*gain_a;// amps\r\n    current_b = (readADCVoltageInline(pinB) - offset_ib)*gain_b;// amps\r\n    current_c = (!_isset(pinC)) ? 0 : (readADCVoltageInline(pinC) - offset_ic)*gain_c; // amps\r\n}\r\n\n'})})}),(0,i.jsx)(s.A,{value:"pid",label:"PID",children:(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-jsx",metastring:'title="DengFOC-Lensson9.ino"',children:"\r\n//2208 100kv\r\nDFOC_M0_SET_ANGLE_PID(1, 0, 0, 100000, 30);\r\nDFOC_M0_SET_VEL_PID(0.02, 1, 0, 100000, 0.5);\r\nDFOC_M0_SET_CURRENT_PID(5, 200, 0, 100000);\r\nDFOC_M0_set_Velocity_Angle(serial_motor_target());\r\n\r\n\r\n//5010 360kv\r\nDFOC_M1_SET_ANGLE_PID(0.2, 0, 0, 100000, 30);\r\nDFOC_M1_SET_VEL_PID(0.05, 0.5, 0, 100000, 0.5);\r\nDFOC_M1_SET_CURRENT_PID(5, 200, 0, 100000);\r\nDFOC_M1_set_Velocity_Angle(serial_motor_target());\n"})})})]})]})}function _(n={}){const{wrapper:e}={...(0,a.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(p,{...n})}):p(n)}}}]);