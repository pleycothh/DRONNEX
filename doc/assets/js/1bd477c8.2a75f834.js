"use strict";(self.webpackChunkdocs_site=self.webpackChunkdocs_site||[]).push([[9145],{2197:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>u,frontMatter:()=>s,metadata:()=>t,toc:()=>a});const t=JSON.parse('{"id":"tutorial/connect-esp32-sbus","title":"Use ELSR reciver on ESP32","description":"Introduction","source":"@site/docs/tutorial/connect-esp32-sbus.md","sourceDirName":"tutorial","slug":"/tutorial/connect-esp32-sbus","permalink":"/doc/docs/tutorial/connect-esp32-sbus","draft":false,"unlisted":false,"editUrl":"https://github.com/pleycothh/DRONNEX/tree/main/docs-site/docs/tutorial/connect-esp32-sbus.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Run Yolo11n on Rock with RKNN","permalink":"/doc/docs/tutorial/yolo11n-rknn-rock5c"},"next":{"title":"Use ESP32 test AS5600","permalink":"/doc/docs/tutorial/as5600-function-test"}}');var i=r(4848),o=r(8453);const s={sidebar_position:2},l="Use ELSR reciver on ESP32",c={},a=[{value:"Introduction",id:"introduction",level:2},{value:"Prerequirement",id:"prerequirement",level:2},{value:"Run Code",id:"run-code",level:2},{value:"Result output",id:"result-output",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"use-elsr-reciver-on-esp32",children:"Use ELSR reciver on ESP32"})}),"\n",(0,i.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,i.jsx)(n.p,{children:"This guid is showing how to read reciver signal on esp32 via uart, this is very helpful to controll robotic via controller. However, not only esp32, any board support uart and and reciver can send sbus signal will bascily work in this tutorial."}),"\n",(0,i.jsx)(n.h2,{id:"prerequirement",children:"Prerequirement"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Hardware:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Any ",(0,i.jsx)(n.a,{href:"https://core-electronics.com.au/pros3-esp32-s3-dev-board-1.html",children:"ESP32"})]}),"\n",(0,i.jsxs)(n.li,{children:["Any reciver supports SBUS ",(0,i.jsx)(n.a,{href:"https://www.radiomasterrc.com/products/xr2-nano-2-4ghz-expresslrs-receiver",children:"Radiomaster ELRS XR2"})]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Wiring guide"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"ESP32 RX"})," \u2192 ",(0,i.jsx)(n.code,{children:"Reciver RX"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"ESP32 Ground"})," \u2192 ",(0,i.jsx)(n.code,{children:"Reciver Ground"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"ESP32 5V"})," \u2192 ",(0,i.jsx)(n.code,{children:"Reciver 5V"})]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"run-code",children:"Run Code"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",metastring:'title="Sbus-streamer.ino"',children:'#include <Servo.h>\r\n#include <AlfredoCRSF.h>\r\n\r\n// Create CRSF and Servo objects\r\nAlfredoCRSF crsf;\r\nServo myServo;\r\n\r\n// Channel index for controlling the servo\r\n#define CHANNEL_INDEX 0  // Channel 1 corresponds to index 0\r\n\r\nvoid setup() {\r\n  Serial.begin(115200);  // Serial Monitor for debugging\r\n  crsf.begin(&Serial1);  // Initialize CRSF on Serial1 (Pin 4 for RX)\r\n  \r\n  myServo.attach(9);     // Attach the servo to Pin 9\r\n  Serial.println("CRSF Servo Control Starting...");\r\n}\r\n\r\nvoid loop() {\r\n  // Update CRSF data\r\n  crsf.update();\r\n\r\n  // Check if CRSF has valid data\r\n  if (crsf.channelsAvailable()) {\r\n    // Get the value from the desired channel\r\n    int channelValue = crsf.getChannel(CHANNEL_INDEX);\r\n\r\n    // Map the CRSF channel range (172-1811) to servo range (0-180 degrees)\r\n    int servoAngle = map(channelValue, 172, 1811, 0, 180);\r\n\r\n    // Move the servo to the desired angle\r\n    myServo.write(servoAngle);\r\n\r\n    // Debug output\r\n    Serial.print("Channel Value: ");\r\n    Serial.print(channelValue);\r\n    Serial.print(" -> Servo Angle: ");\r\n    Serial.println(servoAngle);\r\n  }\r\n\r\n  delay(20); // Add a slight delay for stability\r\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"result-output",children:"Result output"})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>s,x:()=>l});var t=r(6540);const i={},o=t.createContext(i);function s(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);