"use strict";(self.webpackChunkdocs_site=self.webpackChunkdocs_site||[]).push([[4731],{3521:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>t,toc:()=>s});const t=JSON.parse('{"id":"FOC/foc-library","title":"Generic FOC library","description":"Introduction","source":"@site/docs/FOC/foc-library.md","sourceDirName":"FOC","slug":"/FOC/foc-library","permalink":"/doc/docs/FOC/foc-library","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/FOC/foc-library.md","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"sidebar_position":5},"sidebar":"tutorialSidebar","previous":{"title":"Field Oriented Control (FOC)","permalink":"/doc/docs/category/field-oriented-control-foc"},"next":{"title":"Examples","permalink":"/doc/docs/category/examples"}}');var o=r(4848),l=r(8453);const a={sidebar_position:5},i="Generic FOC library",c={},s=[{value:"Introduction",id:"introduction",level:2},{value:"Prerequirement",id:"prerequirement",level:2},{value:"Open Loop control",id:"open-loop-control",level:2}];function p(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"generic-foc-library",children:"Generic FOC library"})}),"\n",(0,o.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,o.jsx)(n.p,{children:"Write a genric FOC library for BLDC motor controll"}),"\n",(0,o.jsx)(n.h2,{id:"prerequirement",children:"Prerequirement"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Hardware:"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Any ",(0,o.jsx)(n.a,{href:"https://core-electronics.com.au/pros3-esp32-s3-dev-board-1.html",children:"SimpleFOC mini"})]}),"\n",(0,o.jsxs)(n.li,{children:["Any ",(0,o.jsx)(n.a,{href:"https://www.amazon.com.au/Alinan-Magnetic-Precision-Induction-Measurement/dp/B09QYC916Q",children:"BLDC"})]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"open-loop-control",children:"Open Loop control"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",metastring:'title="open-loop.ino"',children:'//int pwmA = 32;\r\n//int pwmB = 33;\r\n//int pwmC = 25;\r\n\r\nint pwmA = 26;\r\nint pwmB = 27;\r\nint pwmC = 14;\r\n\r\n\r\n#define _constrain(amt, low, high) ((amt) < (low) ? (low) : ((amt) > (high) ? (high) : (amt)))\r\n\r\n\r\nfloat voltage_power_supply = 12.6;\r\nfloat shaft_angle = 0, open_loop_timestamp = 0;\r\nfloat zero_electric_angle = 0, Ualpha, Ubeta = 0, Ua = 0, Ub = 0, Uc = 0, dc_a = 0, dc_b = 0, dc_c = 0;\r\n\r\n\r\nvoid setup() {\r\n  // put your setup code here, to run once:\r\n  Serial.begin(115200);\r\n  //PWM\r\n  pinMode(12, OUTPUT);\r\n  digitalWrite(12, HIGH); \r\n\r\n  pinMode(pwmA, OUTPUT);\r\n  pinMode(pwmB, OUTPUT);\r\n  pinMode(pwmC, OUTPUT);\r\n  ledcSetup(0, 30000, 8);\r\n  ledcSetup(1, 30000, 8); \r\n  ledcSetup(2, 30000, 8);  \r\n  ledcAttachPin(pwmA, 0);\r\n  ledcAttachPin(pwmB, 1);\r\n  ledcAttachPin(pwmC, 2);\r\n  Serial.println("complete PWM initialization");\r\n  delay(3000);\r\n}\r\n\r\n// Get electric angle\r\nfloat _electricalAngle(float shaft_angle, int pole_pairs) {\r\n  return (shaft_angle * pole_pairs);\r\n}\r\n\r\n// combine angle to [0,2PI]\r\nfloat _normalizeAngle(float angle) {\r\n  float a = fmod(angle, 2 * PI);  \r\n  return a >= 0 ? a : (a + 2 * PI);\r\n}\r\n\r\n\r\n// Set PWM out put\r\nvoid setPwm(float Ua, float Ub, float Uc) {\r\n\r\n  dc_a = _constrain(Ua / voltage_power_supply, 0.0f, 1.0f);\r\n  dc_b = _constrain(Ub / voltage_power_supply, 0.0f, 1.0f);\r\n  dc_c = _constrain(Uc / voltage_power_supply, 0.0f, 1.0f);\r\n\r\n  ledcWrite(0, dc_a * 255);\r\n  ledcWrite(1, dc_b * 255);\r\n  ledcWrite(2, dc_c * 255);\r\n}\r\n\r\nvoid setPhaseVoltage(float Uq, float Ud, float angle_el) {\r\n  angle_el = _normalizeAngle(angle_el + zero_electric_angle);\r\n\r\n  Ualpha = -Uq * sin(angle_el);\r\n  Ubeta = Uq * cos(angle_el);\r\n\r\n  Ua = Ualpha + voltage_power_supply / 2;\r\n  Ub = (sqrt(3) * Ubeta - Ualpha) / 2 + voltage_power_supply / 2;\r\n  Uc = (-Ualpha - sqrt(3) * Ubeta) / 2 + voltage_power_supply / 2;\r\n  setPwm(Ua, Ub, Uc);\r\n}\r\n\r\nfloat velocityOpenloop(float target_velocity) {\r\n  unsigned long now_us = micros(); \r\n  float Ts = (now_us - open_loop_timestamp) * 1e-6f;\r\n\r\n  if (Ts <= 0 || Ts > 0.5f) Ts = 1e-3f;\r\n\r\n  shaft_angle = _normalizeAngle(shaft_angle + target_velocity * Ts);\r\n\r\n  float Uq = voltage_power_supply / 3;\r\n\r\n  setPhaseVoltage(Uq, 0, _electricalAngle(shaft_angle, 7));\r\n\r\n  open_loop_timestamp = now_us;\r\n\r\n  return Uq;\r\n}\r\n\r\n\r\nvoid loop() {\r\n  // put your main code here, to run repeatedly:\r\n  velocityOpenloop(5);\r\n}\r\n\n'})})]})}function d(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(p,{...e})}):p(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>i});var t=r(6540);const o={},l=t.createContext(o);function a(e){const n=t.useContext(l);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),t.createElement(l.Provider,{value:n},e.children)}}}]);